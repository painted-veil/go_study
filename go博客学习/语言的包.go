//一个文件夹下面直接包含的文件只能归属一个package，同样一个package的文件不能在多个文件夹下。
//包名可以不和文件夹的名字一样，包名不能包含 - 符号。
//包名为main的包为应用程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含main包的源代码则不会得到可执行文件。
package pkg2

//包名是从$GOPATH/src/后开始计算的，使用/进行路径分隔。
//Go语言中禁止循环导入包。
import "fmt"

//import 别名 "包的路径"
//定影一个名为pkg2的包

//匿名导入包
//import _ "包的路径"

//包变量可见性
var a = 100 //首字母小写，外部包不可见，只能在当前包内使用

const Mode = 1 //首字母大写外部包可见，可在其他包中使用

type person struct { //首字母小写，外部包不可见，只能当前包内使用
	name string
}

func Add(x, y int) int { //首字母大写，外部包可见，可在其他包中使用
	return x + y
}
func age() { //首字母小写，外部包不可见，只能当前包内使用
	var Age = 18 //函数局部变量，外部包不可见，只能在当前函数内使用
	fmt.Println(Age)
}

type Student struct {
	Name  string //可在包外访问的方法
	class string //仅限包内访问的字段
}
type Payer interface {
	init() //仅限包内访问的方法
	Pay()  //可在包外访问的方法
}

//在Go语言程序执行时导入包语句会自动触发包内部init()函数的调用。需要注意的是： init()函数没有参数也没有返回值。 init()函数在程序运行时自动被调用执行，不能在代码中主动调用它。
//Go语言包会从main包开始检查其导入的所有包，每个包中又可能导入了其他的包。
//Go编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码。
//在运行时，被最后导入的包会最先初始化并调用其init()函数
